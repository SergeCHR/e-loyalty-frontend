/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthLoginPasswordImport } from './routes/auth/login-password'

// Create Virtual Routes

const NotAuthenticatedLazyImport = createFileRoute('/not-authenticated')()
const IndexLazyImport = createFileRoute('/')()
const ClientsIndexLazyImport = createFileRoute('/clients/')()
const AuthVerifyLazyImport = createFileRoute('/auth/verify')()
const AuthResetPasswordLazyImport = createFileRoute('/auth/reset-password')()
const AuthRegisterLazyImport = createFileRoute('/auth/register')()
const AuthLoginLazyImport = createFileRoute('/auth/login')()
const AuthFinishRegistrationLazyImport = createFileRoute(
  '/auth/finish-registration',
)()
const DashboardUsersIndexLazyImport = createFileRoute('/dashboard/users/')()
const DashboardPersonalizationSettingsIndexLazyImport = createFileRoute(
  '/dashboard/personalization-settings/',
)()
const DashboardNotificationSettingsIndexLazyImport = createFileRoute(
  '/dashboard/notification-settings/',
)()
const DashboardLoyaltySystemSettingsIndexLazyImport = createFileRoute(
  '/dashboard/loyalty-system-settings/',
)()
const DashboardDocsIndexLazyImport = createFileRoute('/dashboard/docs/')()
const ClientsSettingsIndexLazyImport = createFileRoute('/clients/settings/')()
const ClientsLoyaltyCardIdIndexLazyImport = createFileRoute(
  '/clients/$loyaltyCardId/',
)()

// Create/Update Routes

const NotAuthenticatedLazyRoute = NotAuthenticatedLazyImport.update({
  path: '/not-authenticated',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/not-authenticated.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ClientsIndexLazyRoute = ClientsIndexLazyImport.update({
  path: '/clients/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/clients/index.lazy').then((d) => d.Route))

const AuthVerifyLazyRoute = AuthVerifyLazyImport.update({
  path: '/auth/verify',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/verify.lazy').then((d) => d.Route))

const AuthResetPasswordLazyRoute = AuthResetPasswordLazyImport.update({
  path: '/auth/reset-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/auth/reset-password.lazy').then((d) => d.Route),
)

const AuthRegisterLazyRoute = AuthRegisterLazyImport.update({
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/register.lazy').then((d) => d.Route))

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/login.lazy').then((d) => d.Route))

const AuthFinishRegistrationLazyRoute = AuthFinishRegistrationLazyImport.update(
  {
    path: '/auth/finish-registration',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/auth/finish-registration.lazy').then((d) => d.Route),
)

const AuthLoginPasswordRoute = AuthLoginPasswordImport.update({
  path: '/auth/login-password',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUsersIndexLazyRoute = DashboardUsersIndexLazyImport.update({
  path: '/dashboard/users/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/users/index.lazy').then((d) => d.Route),
)

const DashboardPersonalizationSettingsIndexLazyRoute =
  DashboardPersonalizationSettingsIndexLazyImport.update({
    path: '/dashboard/personalization-settings/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/personalization-settings/index.lazy').then(
      (d) => d.Route,
    ),
  )

const DashboardNotificationSettingsIndexLazyRoute =
  DashboardNotificationSettingsIndexLazyImport.update({
    path: '/dashboard/notification-settings/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/notification-settings/index.lazy').then(
      (d) => d.Route,
    ),
  )

const DashboardLoyaltySystemSettingsIndexLazyRoute =
  DashboardLoyaltySystemSettingsIndexLazyImport.update({
    path: '/dashboard/loyalty-system-settings/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/dashboard/loyalty-system-settings/index.lazy').then(
      (d) => d.Route,
    ),
  )

const DashboardDocsIndexLazyRoute = DashboardDocsIndexLazyImport.update({
  path: '/dashboard/docs/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/docs/index.lazy').then((d) => d.Route),
)

const ClientsSettingsIndexLazyRoute = ClientsSettingsIndexLazyImport.update({
  path: '/clients/settings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/clients/settings/index.lazy').then((d) => d.Route),
)

const ClientsLoyaltyCardIdIndexLazyRoute =
  ClientsLoyaltyCardIdIndexLazyImport.update({
    path: '/clients/$loyaltyCardId/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/clients/$loyaltyCardId/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/not-authenticated': {
      preLoaderRoute: typeof NotAuthenticatedLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/login-password': {
      preLoaderRoute: typeof AuthLoginPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/finish-registration': {
      preLoaderRoute: typeof AuthFinishRegistrationLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      preLoaderRoute: typeof AuthLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      preLoaderRoute: typeof AuthRegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/reset-password': {
      preLoaderRoute: typeof AuthResetPasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/verify': {
      preLoaderRoute: typeof AuthVerifyLazyImport
      parentRoute: typeof rootRoute
    }
    '/clients/': {
      preLoaderRoute: typeof ClientsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/clients/$loyaltyCardId/': {
      preLoaderRoute: typeof ClientsLoyaltyCardIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/clients/settings/': {
      preLoaderRoute: typeof ClientsSettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/docs/': {
      preLoaderRoute: typeof DashboardDocsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/loyalty-system-settings/': {
      preLoaderRoute: typeof DashboardLoyaltySystemSettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/notification-settings/': {
      preLoaderRoute: typeof DashboardNotificationSettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/personalization-settings/': {
      preLoaderRoute: typeof DashboardPersonalizationSettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/users/': {
      preLoaderRoute: typeof DashboardUsersIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  NotAuthenticatedLazyRoute,
  AuthLoginPasswordRoute,
  AuthFinishRegistrationLazyRoute,
  AuthLoginLazyRoute,
  AuthRegisterLazyRoute,
  AuthResetPasswordLazyRoute,
  AuthVerifyLazyRoute,
  ClientsIndexLazyRoute,
  ClientsLoyaltyCardIdIndexLazyRoute,
  ClientsSettingsIndexLazyRoute,
  DashboardDocsIndexLazyRoute,
  DashboardLoyaltySystemSettingsIndexLazyRoute,
  DashboardNotificationSettingsIndexLazyRoute,
  DashboardPersonalizationSettingsIndexLazyRoute,
  DashboardUsersIndexLazyRoute,
])

/* prettier-ignore-end */
